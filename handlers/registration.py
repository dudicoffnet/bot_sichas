from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from states.registration import Reg
from keyboards.main import kb_main
from data.db import save_user, set_free, get_matches

ACTIVITIES = [
    "‚òï –ö–æ—Ñ–µ", "üö∂ –ü—Ä–æ–≥—É–ª–∫–∞", "üé¨ –ö–∏–Ω–æ", "üõçÔ∏è –®–æ–ø–∏–Ω–≥", "üèí –ö–∞—Ç–æ–∫",
    "üé≥ –ë–æ—É–ª–∏–Ω–≥", "üèûÔ∏è –ó–∞ –≥–æ—Ä–æ–¥", "üèõÔ∏è –ú—É–∑–µ–π/–≤—ã—Å—Ç–∞–≤–∫–∞", "üçï –ì–æ—Ç–æ–≤–∫–∞",
    "üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "üö¥ –í–µ–ª–æ–ø—Ä–æ–≥—É–ª–∫–∞", "üì∏ –§–æ—Ç–æ-–ø—Ä–æ–≥—É–ª–∫–∞",
    "üèä –ê–∫–≤–∞–ø–∞—Ä–∫", "üç∑ –ë–∞—Ä/–≤–∏–Ω–æ", "üèÉ –°–ø–æ—Ä—Ç/–π–æ–≥–∞"
]

def register_handlers_registration(dp: Dispatcher):
    @dp.message_handler(lambda m: m.text == "üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
    async def anketa_start(m: types.Message, state: FSMContext):
        await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await Reg.name.set()

    @dp.message_handler(state=Reg.name)
    async def reg_name(m: types.Message, state: FSMContext):
        await state.update_data(name=m.text.strip())
        await m.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—á–∏—Å–ª–æ–º)")
        await Reg.age.set()

    @dp.message_handler(state=Reg.age)
    async def reg_age(m: types.Message, state: FSMContext):
        if not m.text.isdigit():
            await m.answer("–ù–∞–ø–∏—à–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(age=int(m.text))
        await m.answer("–¢–≤–æ–π –ø–æ–ª? (–º/–∂)")
        await Reg.gender.set()

    @dp.message_handler(state=Reg.gender)
    async def reg_gender(m: types.Message, state: FSMContext):
        gender = m.text.lower().strip()
        if gender not in ["–º", "–∂", "m", "f"]:
            await m.answer("–£–∫–∞–∂–∏ –º –∏–ª–∏ –∂.")
            return
        await state.update_data(gender="–º" if gender in ["–º", "m"] else "–∂")
        await m.answer("–ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å? (—Ä–∞–π–æ–Ω/–∞–¥—Ä–µ—Å –∫–æ—Ä–æ—Ç–∫–æ)")
        await Reg.location.set()

    @dp.message_handler(state=Reg.location)
    async def reg_location(m: types.Message, state: FSMContext):
        await state.update_data(location=m.text.strip())
        text = "–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n" + ", ".join(ACTIVITIES)
        await m.answer(text)
        await Reg.activities.set()

    @dp.message_handler(state=Reg.activities)
    async def reg_activities(m: types.Message, state: FSMContext):
        chosen = [x.strip() for x in m.text.split(",") if x.strip()]
        data = await state.get_data()
        save_user(
            user_id=m.from_user.id,
            name=data.get("name"),
            age=data.get("age"),
            gender=data.get("gender"),
            location=data.get("location"),
            activities=", ".join(chosen)
        )
        await state.finish()
        await m.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ", reply_markup=kb_main)

    @dp.message_handler(lambda m: m.text == "üîî –Ø —Å–≤–æ–±–æ–¥–µ–Ω")
    async def i_am_free(m: types.Message):
        set_free(m.from_user.id, True)
        await m.answer("–û–∫, –ø–æ–º–µ—Ç–∏–ª —Ç–µ–±—è –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ–≥–æ –∏—â–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ö–æ—Ñ–µ¬ª).")

    @dp.message_handler(lambda m: m.text == "üíñ –ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É")
    async def donate(m: types.Message):
        await m.answer("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—É BYN **** **** **** **** –∏–ª–∏ –ø–æ QR. –°–ø–∞—Å–∏–±–æ!")

    @dp.message_handler(lambda m: m.text and not m.text.startswith("/"))
    async def search_activity(m: types.Message):
        q = m.text.strip()
        matches = get_matches(q)
        if not matches:
            await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return
        lines = []
        for uid, name, age, gender, loc, acts in matches[:10]:
            lines.append(f"‚Ä¢ {name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}, {age or '?'} ({gender or '?'}) ‚Äî {loc or '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {acts}")
        await m.answer("–ù–∞—à—ë–ª –ª—é–¥–µ–π:\n" + "\n\n".join(lines))
