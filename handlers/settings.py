from aiogram import Router
from aiogram.types import Message
from keyboards.main import main_kb, settings_kb, radius_kb, intents_kb
from utils.store import get_state

router = Router()

@router.message(lambda m: (m.text or "").strip() in {"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"})
async def open_settings(m: Message):
    await m.answer("–ß—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º?", reply_markup=settings_kb)

@router.message(lambda m: (m.text or "").strip() in {"üìç –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞"})
async def open_radius(m: Message):
    st = get_state(m.from_user.id)
    await m.answer(f"–¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å: {getattr(st, 'radius_km', 5)} –∫–º. –í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π:", reply_markup=radius_kb)

@router.message(lambda m: (m.text or "").strip() in {"1 –∫–º","3 –∫–º","5 –∫–º","10 –∫–º"})
async def set_radius(m: Message):
    st = get_state(m.from_user.id)
    st.radius_km = int(m.text.split()[0])
    await m.answer(f"–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {st.radius_km} –∫–º.", reply_markup=settings_kb)

@router.message(lambda m: (m.text or "").strip() in {"üéØ –¶–µ–ª–∏ –≤—Å—Ç—Ä–µ—á–∏"})
async def open_intents(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ 1‚Äì3 —Ü–µ–ª–∏ (–º–æ–∂–Ω–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏).", reply_markup=intents_kb)

INTENT_SET = {
    "üç∑ –í—ã–ø–∏—Ç—å –±–æ–∫–∞–ª –≤–∏–Ω–∞","üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å","‚òï –ö–æ—Ñ–µ","üõçÔ∏è –ü–æ—à–æ–ø–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ","üö∂ –ü—Ä–æ–≥—É–ª–∫–∞","üé¨ –ö–∏–Ω–æ",
    "üèõÔ∏è –ú—É–∑–µ–π","üíº –ö–æ–≤–æ—Ä–∫–∏–Ω–≥","üèãÔ∏è –°–ø–æ—Ä—Ç–∑–∞–ª","üèÉ –ü—Ä–æ–±–µ–∂–∫–∞","üé≤ –ù–∞—Å—Ç–æ–ª–∫–∏","üì∏ –§–æ—Ç–æ–ø—Ä–æ–≥—É–ª–∫–∞",
    "üó£Ô∏è –Ø–∑—ã–∫–æ–≤–æ–π –æ–±–º–µ–Ω","üìö –£—á—ë–±–∞ –≤–º–µ—Å—Ç–µ","üß≥ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è/–ø–ª–∞–Ω—ã","üêï –í—ã–≥—É–ª —Å–æ–±–∞–∫–∏",
    "üéâ –í–µ—á–µ—Ä–∏–Ω–∫–∞","üçΩÔ∏è –ü–æ–µ—Å—Ç—å –≤–º–µ—Å—Ç–µ"
}

@router.message(lambda m: (m.text or "").strip() in INTENT_SET)
async def save_intent(m: Message):
    st = get_state(m.from_user.id)
    intents = set(getattr(st, "intents", []))
    if len(intents) >= 3 and m.text not in intents:
        return await m.answer("–£ —Ç–µ–±—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ 3 —Ü–µ–ª–∏. –£–¥–∞–ª–∏ –æ–¥–Ω—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=intents_kb)
    intents.add(m.text.strip())
    st.intents = list(intents)
    await m.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {m.text} ‚úì", reply_markup=intents_kb)

@router.message(lambda m: (m.text or "").strip() in {"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"})
async def back_to_menu(m: Message):
    await m.answer("–ú–µ–Ω—é:", reply_markup=main_kb())
