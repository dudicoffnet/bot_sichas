from aiogram import Router
from aiogram.types import Message
from keyboards.main import main_kb
from utils.store import get_state

router = Router()

def _set_step(user_id: int, step: str | None):
    st = get_state(user_id)
    st.filling_step = step

def _get_step(user_id: int):
    st = get_state(user_id)
    return getattr(st, "filling_step", None)

# –ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã
@router.message(lambda m: (m.text or "").strip() in {"/anketa", "‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"})
async def anketa_start(m: Message):
    _set_step(m.from_user.id, "name")
    await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–≤–≤–µ–¥–∏ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º)", reply_markup=main_kb())

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç ¬´–ú–æ—è –∞–Ω–∫–µ—Ç–∞¬ª, –∞ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º —Å–±–æ—Ä
@router.message(lambda m: (m.text or "").strip() in {"üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞", "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"})
async def maybe_show_or_fill(m: Message):
    st = get_state(m.from_user.id)
    if not getattr(st, "name", None) or not getattr(st, "age", None) or not getattr(st, "city", None):
        return await anketa_start(m)
    # –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º, –∫–∞–∫ —É —Ç–µ–±—è —Å–¥–µ–ª–∞–Ω–æ –≤ profile.py
    # —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º: –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è

@router.message(lambda m: _get_step(m.from_user.id) == "name")
async def step_name(m: Message):
    st = get_state(m.from_user.id)
    st.name = (m.text or "").strip()
    _set_step(m.from_user.id, "age")
    await m.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)")

@router.message(lambda m: _get_step(m.from_user.id) == "age")
async def step_age(m: Message):
    txt = (m.text or "").strip()
    if not txt.isdigit():
        return await m.answer("–ù—É–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 27.")
    st = get_state(m.from_user.id)
    st.age = int(txt)
    _set_step(m.from_user.id, "city")
    await m.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")

@router.message(lambda m: _get_step(m.from_user.id) == "city")
async def step_city(m: Message):
    st = get_state(m.from_user.id)
    st.city = (m.text or "").strip()
    _set_step(m.from_user.id, "photo_optional")
    await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")

@router.message(lambda m: _get_step(m.from_user.id) == "photo_optional" and m.photo)
async def step_photo(m: Message):
    st = get_state(m.from_user.id)
    st.photo_id = m.photo[-1].file_id
    _set_step(m.from_user.id, None)
    await _finish(m)

@router.message(lambda m: _get_step(m.from_user.id) == "photo_optional")
async def step_photo_skip(m: Message):
    if (m.text or "").strip().lower() not in {"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"}:
        return await m.answer("–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
    _set_step(m.from_user.id, None)
    await _finish(m)

async def _finish(m: Message):
    st = get_state(m.from_user.id)
    name = getattr(st, "name", "‚Äî")
    age = getattr(st, "age", "‚Äî")
    city = getattr(st, "city", "‚Äî")
    intents = getattr(st, "intents", [])
    intents_str = " / ".join(intents) if intents else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    txt = (
        "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n\n"
        f"‚Ä¢ –ò–º—è: {name}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"‚Ä¢ –ì–æ—Ä–æ–¥: {city}\n"
        f"‚Ä¢ –¶–µ–ª–∏: {intents_str}\n\n"
        "–¶–µ–ª–∏ –∏ —Ä–∞–¥–∏—É—Å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏."
    )
    await m.answer(txt, reply_markup=main_kb())
