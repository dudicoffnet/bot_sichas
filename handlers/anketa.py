from aiogram import Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.main import main_kb, intents_kb, radius_kb
from utils.store import get_state

router = Router()

class Anketa(StatesGroup):
    name = State()
    age = State()
    city = State()
    intents = State()
    radius = State()

@router.message(lambda m: (m.text or "").strip() in {"üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞"})
async def start_anketa(m: types.Message, state: FSMContext):
    await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Anketa.name)

@router.message(Anketa.name)
async def anketa_name(m: types.Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await m.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (14‚Äì100)")
    await state.set_state(Anketa.age)

@router.message(Anketa.age)
async def anketa_age(m: types.Message, state: FSMContext):
    if not m.text.isdigit() or not (14 <= int(m.text) <= 100):
        return await m.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 14 –¥–æ 100.")
    await state.update_data(age=int(m.text))
    await m.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    await state.set_state(Anketa.city)

@router.message(Anketa.city)
async def anketa_city(m: types.Message, state: FSMContext):
    await state.update_data(city=m.text.strip())
    await m.answer("–í—ã–±–µ—Ä–∏ 1‚Äì3 —Ü–µ–ª–∏ –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=intents_kb)
    await state.set_state(Anketa.intents)

@router.message(Anketa.intents)
async def anketa_intents(m: types.Message, state: FSMContext):
    data = await state.get_data()
    intents = data.get("intents", [])
    if len(intents) >= 3 and m.text not in intents:
        return await m.answer("–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ 3 —Ü–µ–ª–∏. –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –æ–¥–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    intents.append(m.text)
    await state.update_data(intents=intents)
    if len(intents) >= 1:
        await m.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", reply_markup=radius_kb)
        await state.set_state(Anketa.radius)

@router.message(Anketa.radius)
async def anketa_radius(m: types.Message, state: FSMContext):
    if not m.text.replace(" –∫–º","").isdigit():
        return await m.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–¥–∏—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
    km = int(m.text.split()[0])
    await state.update_data(radius=km)
    data = await state.get_data()
    txt = (f"–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
           f"–ò–º—è: {data['name']}\n"
           f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
           f"–ì–æ—Ä–æ–¥: {data['city']}\n"
           f"–¶–µ–ª–∏: {', '.join(data.get('intents', []))}\n"
           f"–†–∞–¥–∏—É—Å: {data['radius']} –∫–º")
    st = get_state(m.from_user.id)
    st.name, st.age, st.city, st.intents, st.radius_km = data['name'], data['age'], data['city'], data['intents'], data['radius']
    await m.answer(txt, reply_markup=main_kb())
    await state.clear()
