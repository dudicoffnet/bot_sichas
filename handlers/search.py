import time
from aiogram import Router
from aiogram.types import Message
from keyboards.main import geo_kb, intents_kb, visibility_kb, main_kb
from utils.store import get_state, get_profile, profiles, states

router = Router()

def haversine(lat1, lon1, lat2, lon2):
    R = 6371.0
    from math import radians, sin, cos, sqrt, atan2
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1))*cos(radians(lat2))*sin(dlon/2)**2
    c = 2*atan2(sqrt(a), sqrt(1-a))
    return R*c

@router.message(lambda m: (m.text or '').strip() in {'üîç –ù–∞–π—Ç–∏ —Ä—è–¥–æ–º','–ù–∞–π—Ç–∏ —Ä—è–¥–æ–º','–ü–æ–∏—Å–∫ —Ä—è–¥–æ–º','–ü–æ–∏—Å–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏'})
async def search_entry(m: Message):
    await m.answer("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª –ª—é–¥–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.", reply_markup=geo_kb)

@router.message(lambda m: m.location is not None)
async def got_location(m: Message):
    st = get_state(m.from_user.id)
    st.location = (m.location.latitude, m.location.longitude)
    await m.answer("–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å:", reply_markup=geo_kb)

@router.message(lambda m: (m.text or '').strip() in {
    "üç∑ –í—ã–ø–∏—Ç—å –±–æ–∫–∞–ª –≤–∏–Ω–∞","üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å","üõçÔ∏è –ü–æ—à–æ–ø–∏—Ç—å—Å—è","üö∂ –ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è","üé¨ –ö–∏–Ω–æ",
    "‚òï –ö–æ—Ñ–µ","üçΩÔ∏è –ü–æ—É–∂–∏–Ω–∞—Ç—å","üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å","üé∂ –ö–æ–Ω—Ü–µ—Ä—Ç","‚öΩ –°–ø–æ—Ä—Ç",
    "üé® –ú—É–∑–µ–π","üå≥ –ü–∞—Ä–∫","üìö –ü–æ—á–∏—Ç–∞—Ç—å","‚úàÔ∏è –û–±—Å—É–¥–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è","‚ùì –î—Ä—É–≥–æ–µ"
})
async def choose_intent(m: Message):
    st = get_state(m.from_user.id)
    st.intent = (m.text or '').strip()
    await m.answer("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å?", reply_markup=geo_kb)

@router.message(lambda m: (m.text or '').strip() in {"30 –º–∏–Ω—É—Ç","1 —á–∞—Å","3 —á–∞—Å–∞","24 —á–∞—Å–∞"})
async def set_visibility(m: Message):
    st = get_state(m.from_user.id)
    now = time.time()
    delta = {"30 –º–∏–Ω—É—Ç":1800, "1 —á–∞—Å":3600, "3 —á–∞—Å–∞":10800, "24 —á–∞—Å–∞":86400}[m.text.strip()]
    st.visible_until = now + delta
    await m.answer("–í–∏–¥–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞. –ò—â—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏‚Ä¶")
    await show_matches(m)

async def show_matches(m: Message):
    st = get_state(m.from_user.id)
    me_loc = st.location
    if not me_loc or not st.intent:
        await m.answer("–ù—É–∂–Ω—ã –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–ª—å.")
        return
    now = time.time()
    results = []
    for uid, other in states.items():
        if uid == m.from_user.id:
            continue
        if not other.location or other.intent != st.intent:
            continue
        if not other.visible_until or other.visible_until < now:
            continue
        radius = st.radius_km
        dist = haversine(me_loc[0], me_loc[1], other.location[0], other.location[1])
        if dist <= radius:
            p = profiles.get(uid)
            if p:
                results.append((dist, f"‚Ä¢ {p.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}, {p.age or '?'} ‚Äî {p.city or ''} ({dist:.1f} –∫–º)"))
            else:
                results.append((dist, f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} ({dist:.1f} –∫–º)"))
    if not results:
        await m.answer("–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return
    results.sort(key=lambda x: x[0])
    await m.answer("–ù–∞—à—ë–ª —Ä—è–¥–æ–º:\n" + "\n".join([t for _, t in results[:10]]))


from keyboards.main import main_kb
@router.message(lambda m: (m.text or '').strip() in {'‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é','–ù–∞–∑–∞–¥','–í –º–µ–Ω—é'})
async def back_from_search(m: Message):
    await m.answer("–ú–µ–Ω—é:", reply_markup=geo_kb)
