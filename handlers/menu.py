from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from app.keyboards.common import main_menu_kb
from app.services.db import get_profile, find_match_for, init_db
from app.config import settings
import os, re

router = Router()

def norm(text: str) -> str:
    t = re.sub(r"[\W_]+", " ", text, flags=re.UNICODE).strip().lower()
    return t

PROFILE_ALIASES = {"–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile", "profil"}
FIND_ALIASES = {"–Ω–∞–π—Ç–∏ —Ä—è–¥–æ–º", "–Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "find nearby", "find"}
SETTINGS_ALIASES = {"–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"}
DONATE_ALIASES = {"–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "–¥–æ–Ω–∞—Ç", "support", "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å"}

@router.message(F.text.func(lambda t: norm(t) in PROFILE_ALIASES))
async def show_profile(message: Message):
    await init_db()
    profile = await get_profile(message.from_user.id)
    if not profile:
        return await message.answer("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ—ë.")
    text = (
        f"üë§ –ò–º—è: {profile.get('name')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age')}\n"
        f"üöª –ü–æ–ª: {profile.get('gender')}\n"
        f"üìç –ì–æ—Ä–æ–¥: {profile.get('city')}\n"
        f"üë´ –ò—â–µ—Ç: {profile.get('search')}\n"
        f"‚úçÔ∏è –û —Å–µ–±–µ: {profile.get('about')}\n"
        f"üì∑ –§–æ—Ç–æ: {'–µ—Å—Ç—å' if profile.get('photo_file_id') else '–Ω–µ—Ç'}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {'—É–∫–∞–∑–∞–Ω–∞' if (profile.get('lat') is not None and profile.get('lon') is not None) else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
    )
    if profile.get("photo_file_id"):
        await message.answer_photo(profile["photo_file_id"], caption=text, reply_markup=main_menu_kb())
    else:
        await message.answer(text, reply_markup=main_menu_kb())

@router.message(F.text.func(lambda t: norm(t) in FIND_ALIASES))
async def find_match(message: Message):
    await init_db()
    me = await get_profile(message.from_user.id)
    if not me:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É: /start")
    candidate = await find_match_for(message.from_user.id, me, settings.SEARCH_RADIUS_KM)
    if not candidate:
        return await message.answer("–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb())
    text = (
        f"–ù–∞—à—ë–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n\n"
        f"üë§ {candidate.get('name')}, {candidate.get('age')}\n"
        f"üöª {candidate.get('gender')}\n"
        f"üìç {candidate.get('city')}\n"
        f"‚úçÔ∏è {candidate.get('about')}"
    )
    if candidate.get("photo_file_id"):
        await message.answer_photo(candidate["photo_file_id"], caption=text, reply_markup=main_menu_kb())
    else:
        await message.answer(text, reply_markup=main_menu_kb())

@router.message(F.text.func(lambda t: norm(t) in SETTINGS_ALIASES))
async def settings_menu(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_menu_kb())

@router.message(F.text.func(lambda t: norm(t) in DONATE_ALIASES))
async def donate(message: Message):
    msg = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\nüì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é."
    await message.answer(msg, reply_markup=main_menu_kb())
    qr_path = os.path.join("assets", "donate_qr.png")
    if os.path.exists(qr_path):
        await message.answer_photo(FSInputFile(qr_path), caption="QR –¥–ª—è –¥–æ–Ω–∞—Ç–∞")
    # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Ç–µ–∫—Å—Ç–æ–º –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª—ë—à—å

@router.message(F.text == "/menu")
async def show_menu_cmd(message: Message):
    await message.answer("–ú–µ–Ω—é:", reply_markup=main_menu_kb())

@router.message(F.text == "/reset")
async def reset_cmd(message: Message):
    await message.answer("–°–±—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã: –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())

def register_menu_handlers(dp):
    dp.include_router(router)
