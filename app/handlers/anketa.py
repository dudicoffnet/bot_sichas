from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from app.states.form import Form
from app.keyboards.common import gender_kb, search_target_kb, confirm_profile_kb, main_menu_kb, photo_skip_kb, location_kb
from app.services.db import save_profile, init_db
from app.config import settings

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await init_db()
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ ¬´–°–µ–π—á–∞—Å¬ª.\n\n–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@router.message(Form.name)
async def form_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—á–∏—Å–ª–æ–º)")
    await state.set_state(Form.age)

@router.message(Form.age)
async def form_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 28")
    await state.update_data(age=int(message.text))
    await message.answer("üöª –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb())
    await state.set_state(Form.gender)

@router.message(Form.gender)
async def form_gender(message: Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]:
        return await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
    await state.update_data(gender=message.text)
    await message.answer("üìç –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.city)

@router.message(Form.city)
async def form_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await message.answer("üë´ –ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?", reply_markup=search_target_kb())
    await state.set_state(Form.search)

@router.message(Form.search)
async def form_search(message: Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—á–∏–Ω—É", "–ñ–µ–Ω—â–∏–Ω—É", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"]:
        return await message.answer("–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    await state.update_data(search=message.text)
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.about)

@router.message(Form.about)
async def form_about(message: Message, state: FSMContext):
    await state.update_data(about=message.text.strip())
    await message.answer("üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–æ–¥–Ω–∏–º —Ñ–æ—Ç–æ) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=photo_skip_kb())
    await state.set_state(Form.photo)

@router.message(Form.photo, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def photo_skip(message: Message, state: FSMContext):
    await state.update_data(photo_file_id=None)
    await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–æ–π) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=location_kb())
    await state.set_state(Form.location)

@router.message(Form.photo, F.photo)
async def photo_save(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo_file_id=file_id)
    await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–æ–π) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=location_kb())
    await state.set_state(Form.location)

@router.message(Form.location, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def location_skip(message: Message, state: FSMContext):
    data = await state.get_data()
    preview = (
        f"–ü—Ä–æ–≤–µ—Ä—å –∞–Ω–∫–µ—Ç—É:\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
        f"üöª –ü–æ–ª: {data.get('gender')}\n"
        f"üìç –ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"üë´ –ò—â–µ—Ç: {data.get('search')}\n"
        f"‚úçÔ∏è –û —Å–µ–±–µ: {data.get('about')}\n"
        f"üì∑ –§–æ—Ç–æ: {'–µ—Å—Ç—å' if data.get('photo_file_id') else '–Ω–µ—Ç'}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    )
    await message.answer(preview, reply_markup=confirm_profile_kb())
    await state.set_state(Form.confirm)

@router.message(Form.location, F.location)
async def location_save(message: Message, state: FSMContext):
    await state.update_data(lat=message.location.latitude, lon=message.location.longitude)
    data = await state.get_data()
    preview = (
        f"–ü—Ä–æ–≤–µ—Ä—å –∞–Ω–∫–µ—Ç—É:\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
        f"üöª –ü–æ–ª: {data.get('gender')}\n"
        f"üìç –ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"üë´ –ò—â–µ—Ç: {data.get('search')}\n"
        f"‚úçÔ∏è –û —Å–µ–±–µ: {data.get('about')}\n"
        f"üì∑ –§–æ—Ç–æ: {'–µ—Å—Ç—å' if data.get('photo_file_id') else '–Ω–µ—Ç'}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: —É–∫–∞–∑–∞–Ω–∞"
    )
    await message.answer(preview, reply_markup=confirm_profile_kb())
    await state.set_state(Form.confirm)

@router.callback_query(F.data == "confirm_profile")
async def confirm_profile(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    profile = {
        "user_id": call.from_user.id,
        "name": data.get("name"),
        "age": data.get("age"),
        "gender": data.get("gender"),
        "city": data.get("city"),
        "search": data.get("search"),
        "about": data.get("about"),
        "photo_file_id": data.get("photo_file_id"),
        "lat": data.get("lat"),
        "lon": data.get("lon"),
    }
    await save_profile(profile)
    await state.clear()
    await call.message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_menu_kb())
    await call.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "edit_name")
async def edit_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(Form.name)
    await call.answer()

@router.callback_query(F.data == "edit_age")
async def edit_age(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):")
    await state.set_state(Form.age)
    await call.answer()

@router.callback_query(F.data == "edit_gender")
async def edit_gender(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=gender_kb())
    await state.set_state(Form.gender)
    await call.answer()

@router.callback_query(F.data == "edit_city")
async def edit_city(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥:")
    await state.set_state(Form.city)
    await call.answer()

@router.callback_query(F.data == "edit_search")
async def edit_search(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ö–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?", reply_markup=search_target_kb())
    await state.set_state(Form.search)
    await call.answer()

@router.callback_query(F.data == "edit_about")
async def edit_about(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ù–∞–ø–∏—à–∏ –æ —Å–µ–±–µ:")
    await state.set_state(Form.about)
    await call.answer()

@router.callback_query(F.data == "edit_photo")
async def edit_photo(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=photo_skip_kb())
    await state.set_state(Form.photo)
    await call.answer()

@router.callback_query(F.data == "edit_location")
async def edit_location(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–æ–π) –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=location_kb())
    await state.set_state(Form.location)
    await call.answer()

def register_anketa_handlers(dp):
    dp.include_router(router)
